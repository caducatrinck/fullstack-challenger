# Use a imagem oficial do PHP com Apache como base
FROM php:8.2-apache

# Instale as extensões necessárias e o Composer
RUN apt-get update && apt-get install -y \
    libpng-dev \
    libjpeg-dev \
    libfreetype6-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    git \
    && docker-php-ext-install pdo pdo_mysql mbstring exif pcntl bcmath gd \
    && pecl install redis xdebug \
    && docker-php-ext-enable redis xdebug

# Habilite o mod_rewrite e mod_headers do Apache
RUN a2enmod rewrite headers

# Garanta que o diretório de logs do Laravel tenha as permissões corretas
RUN mkdir -p /var/www/html/storage/logs && chmod -R 777 /var/www/html/storage/logs

# Configurações do XDebug
RUN echo "zend_extension=xdebug.so" > /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "xdebug.mode=trace" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "xdebug.start_with_request=yes" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "xdebug.client_host=host.docker.internal" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "xdebug.client_port=9003" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "xdebug.log=/var/www/html/storage/logs/xdebug.log" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
    && echo "xdebug.trace_output_dir=/var/www/html/storage/logs/traces" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini

# Configuração global do ServerName para evitar mensagens de erro
RUN echo "ServerName localhost" >> /etc/apache2/apache2.conf

# Copie o Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Defina o diretório de trabalho dentro do contêiner
WORKDIR /var/www/html

# Copie o arquivo composer.json e composer.lock para o diretório de trabalho
COPY composer.json composer.lock ./

# Instale as dependências do Laravel
RUN composer install --prefer-dist --no-scripts --no-autoloader

# Copie o restante do código do aplicativo para o diretório de trabalho
COPY . .

# Gere o autoload e execute os scripts pós-instalação do Composer
RUN composer dump-autoload --optimize

# Crie o link simbólico do Laravel
RUN php artisan storage:link

# Defina as permissões corretas para o diretório de cache/storage
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache
RUN chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache

# Crie o arquivo de configuração do Virtual Host
RUN echo '<VirtualHost *:80>\n\
    ServerAdmin webmaster@localhost\n\
    DocumentRoot /var/www/html/public\n\
    <Directory /var/www/html>\n\
        Options Indexes FollowSymLinks\n\
        AllowOverride All\n\
        Require all granted\n\
        Header set Access-Control-Allow-Origin "*"\n\
        Header set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"\n\
        Header set Access-Control-Allow-Headers "Content-Type, Authorization"\n\
    </Directory>\n\
    ErrorLog ${APACHE_LOG_DIR}/error.log\n\
    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\
    ServerName localhost\n\
</VirtualHost>' > /etc/apache2/sites-available/000-default.conf

# Exponha a porta que o Apache irá usar
EXPOSE 80

# Copie o script de inicialização para o contêiner
COPY start.sh /var/www/html/

# Comando para iniciar o servidor Apache via script de inicialização
CMD ["/var/www/html/start.sh"]
